package com.example.demo.controller;

import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.dto.UserDto;
import com.example.demo.entity.model.CreateUserRequestModel;
import com.example.demo.entity.model.CreateUserResponseModel;
import com.example.demo.entity.service.UserService;
import com.netflix.discovery.converters.Auto;

@RestController
@RequestMapping("/users")
public class UserController {
	
	@Autowired
	private UserService userService;

	@PostMapping("/create")
	public ResponseEntity<CreateUserResponseModel> createUser(@RequestBody CreateUserRequestModel userDetails) {
		
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserDto userDto = mapper.map(userDetails, UserDto.class );
		userDto.setUserId(UUID.randomUUID().toString());//setting a unique useID every time an new user is created. 
		UserDto dto = userService.createUser(userDto);
		CreateUserResponseModel response = mapper.map(dto, CreateUserResponseModel.class);
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
	
	}
	
	@GetMapping("/find/{id}")
	public ResponseEntity<CreateUserResponseModel> searchById(@PathVariable int id) {
		
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserDto dto=userService.findById(id);
		CreateUserResponseModel response = mapper.map(dto, CreateUserResponseModel.class);
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
	
	}
	
	@GetMapping("/find/email")
	public ResponseEntity<CreateUserResponseModel> searchByEmail(@RequestParam String email) {
		
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserDto dto=userService.findByEmail(email);
		CreateUserResponseModel response = mapper.map(dto, CreateUserResponseModel.class);
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
	
	}
	
	@GetMapping("/find/lname")
	public ResponseEntity<CreateUserResponseModel> searchByLastName(@RequestParam String lname) {
		
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserDto dto=userService.findByLastName(lname);
		CreateUserResponseModel response = mapper.map(dto, CreateUserResponseModel.class);
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
	
	}

}
